I" Ö<h1 id="aws-dax-dynamodb-accelerator">AWS DAX (DynamoDB Accelerator)</h1>

<p>When we using DynamoDB, we will meet some throughput exceeded or bad performance issue. In order to optimize these cases, we usually cache the data by ourself by using some in memory cache service or gate way to do the http cache. But thatâ€™â€™s means we must care about the performance of these services and also make sure they are high available and scalable.</p>

<p>In year 2017, DynamoDB release the DAX service to let user easy to manage the cache of DynamoDB.</p>

<h2 id="what-is-dax">What is DAX</h2>

<p>Dax is a in memory cache service for AWS DynamoDB and could handle multiply operations of DynamoDB. Itâ€™s high available and scalable and could measured in single-digit microseconds.</p>

<p>To make it easy to modify the existing application to use dax, the DaxClient is very similar to DynamoDB lower-leve client in java. So you just need to modify a few code to use it.</p>

<h2 id="the-usage-scenario">The usage scenario</h2>

<p>Dax is idea for:</p>

<ul>
  <li>Read heavy or read intensive</li>
  <li>Bursty workload</li>
  <li>Time cost intensive</li>
</ul>

<p>Dax is not idea for:</p>

<ul>
  <li>Write intensive</li>
  <li>Need strongly consistent read</li>
  <li>Time cost not intensive, do not required for microsecond response</li>
  <li>Already have other cache solution for the application</li>
</ul>

<h2 id="the-design">The design</h2>

<p><img src="http://localhost:4000/images/aws_dax/dax_design.png" alt="Dax Design" /></p>

<p>When application send request to Dax, Dax attempt to read the data from cache, if hit,  Dax return it immediately, otherwise will sent the request to DynamoDB and return it to the client side and store it in the cache.</p>

<h2 id="java-code">Java code</h2>

<p>As we know, DAX support some read operations of DynamoDB, include:</p>
<ul>
  <li>Query</li>
  <li>Scan</li>
  <li>Get Item</li>
  <li>Batch Get Item</li>
</ul>

<p>When DAX storing the data in cache, it follow the rule as below:</p>

<p><strong><em>Item Cache</em></strong>
DAX use item key value as the cache key and item as the cache value</p>

<p><strong><em>Query Cache</em></strong>
DAX use query parameter as the cache key and item set as the cache value</p>

<p>So letâ€™s do some test to check the algorithm</p>

<p>First letâ€™s prepare some data</p>

<ul>
  <li>Create a table named <code class="language-plaintext highlighter-rouge">dax_test</code></li>
  <li>Hash key is id, another two fields is name and age</li>
  <li>Create two index, named <code class="language-plaintext highlighter-rouge">index_user_name</code> &amp; <code class="language-plaintext highlighter-rouge">index_user_age</code></li>
  <li>1000 objects with name field value of <code class="language-plaintext highlighter-rouge">ChrisYe</code></li>
  <li>500 objects with name field value of <code class="language-plaintext highlighter-rouge">ChrisYe</code> and age field of <code class="language-plaintext highlighter-rouge">28</code></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">dynamodb</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperFieldModel</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.document.DynamoDB</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.AttributeDefinition</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.CreateTableRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.GlobalSecondaryIndex</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.KeySchemaElement</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.Projection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.ProjectionType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">credential.AwsCredential</span><span class="o">;</span>

<span class="cm">/**
 * dynamodb.DaxDataPrepare
 * &lt;p&gt;
 * Author: ChrisYe
 * Date: 10/17/2017
 */</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DaxDataPrepare</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DAX_TEST_TABLE</span> <span class="o">=</span> <span class="s">"dax_test"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DAX_TEST_TABLE_HASH_KEY</span> <span class="o">=</span> <span class="s">"id"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DAX_TEST_USER_NAME</span> <span class="o">=</span> <span class="s">"user_name"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">DAX_TEST_USER_AGE</span> <span class="o">=</span> <span class="s">"user_age"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">INDEX_USER_NAME</span> <span class="o">=</span> <span class="s">"index_user_name"</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">INDEX_USER_AGE</span> <span class="o">=</span> <span class="s">"index_user_age"</span><span class="o">;</span>


    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createTable</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">AmazonDynamoDBClient</span> <span class="n">amazonDynamoDBClient</span> <span class="o">=</span> <span class="nc">AwsCredential</span><span class="o">.</span><span class="na">getDynamoDBClient</span><span class="o">();</span>

        <span class="nc">DynamoDB</span> <span class="n">dynamoDB</span> <span class="o">=</span> <span class="nc">AwsCredential</span><span class="o">.</span><span class="na">getDynamoDB</span><span class="o">();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">dynamoDB</span><span class="o">.</span><span class="na">getTable</span><span class="o">(</span><span class="no">DAX_TEST_TABLE</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="c1">// Attributes</span>
            <span class="nc">AttributeDefinition</span> <span class="n">hashKey</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AttributeDefinition</span><span class="o">(</span><span class="no">DAX_TEST_TABLE_HASH_KEY</span><span class="o">,</span> <span class="nc">DynamoDBMapperFieldModel</span><span class="o">.</span><span class="na">DynamoDBAttributeType</span><span class="o">.</span><span class="na">S</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
            <span class="nc">AttributeDefinition</span> <span class="n">userNameIndex</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AttributeDefinition</span><span class="o">(</span><span class="no">DAX_TEST_USER_NAME</span><span class="o">,</span> <span class="nc">DynamoDBMapperFieldModel</span><span class="o">.</span><span class="na">DynamoDBAttributeType</span><span class="o">.</span><span class="na">S</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
            <span class="nc">AttributeDefinition</span> <span class="n">userAgeIndex</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AttributeDefinition</span><span class="o">(</span><span class="no">DAX_TEST_USER_AGE</span><span class="o">,</span> <span class="nc">DynamoDBMapperFieldModel</span><span class="o">.</span><span class="na">DynamoDBAttributeType</span><span class="o">.</span><span class="na">N</span><span class="o">.</span><span class="na">name</span><span class="o">());</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">AttributeDefinition</span><span class="o">&gt;</span> <span class="n">attributeDefinitionList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">attributeDefinitionList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">hashKey</span><span class="o">);</span>
            <span class="n">attributeDefinitionList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">userNameIndex</span><span class="o">);</span>
            <span class="n">attributeDefinitionList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">userAgeIndex</span><span class="o">);</span>

            <span class="c1">// Indexes</span>
            <span class="nc">GlobalSecondaryIndex</span> <span class="n">userNameGSI</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GlobalSecondaryIndex</span><span class="o">();</span>
            <span class="n">userNameGSI</span>
                    <span class="o">.</span><span class="na">withIndexName</span><span class="o">(</span><span class="no">INDEX_USER_NAME</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">withKeySchema</span><span class="o">(</span><span class="k">new</span> <span class="nc">KeySchemaElement</span><span class="o">(</span><span class="no">DAX_TEST_USER_NAME</span><span class="o">,</span> <span class="s">"HASH"</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">withProjection</span><span class="o">(</span><span class="k">new</span> <span class="nc">Projection</span><span class="o">().</span><span class="na">withProjectionType</span><span class="o">(</span><span class="nc">ProjectionType</span><span class="o">.</span><span class="na">ALL</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">withProvisionedThroughput</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProvisionedThroughput</span><span class="o">(</span><span class="mi">20L</span><span class="o">,</span> <span class="mi">10L</span><span class="o">));</span>
            <span class="nc">GlobalSecondaryIndex</span> <span class="n">userAgeGSI</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GlobalSecondaryIndex</span><span class="o">();</span>
            <span class="n">userAgeGSI</span>
                    <span class="o">.</span><span class="na">withIndexName</span><span class="o">(</span><span class="no">INDEX_USER_AGE</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">withKeySchema</span><span class="o">(</span><span class="k">new</span> <span class="nc">KeySchemaElement</span><span class="o">(</span><span class="no">DAX_TEST_USER_AGE</span><span class="o">,</span> <span class="s">"HASH"</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">withProjection</span><span class="o">(</span><span class="k">new</span> <span class="nc">Projection</span><span class="o">().</span><span class="na">withProjectionType</span><span class="o">(</span><span class="nc">ProjectionType</span><span class="o">.</span><span class="na">ALL</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">withProvisionedThroughput</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProvisionedThroughput</span><span class="o">(</span><span class="mi">20L</span><span class="o">,</span> <span class="mi">10L</span><span class="o">));</span>

            <span class="c1">//KeySchema</span>
            <span class="nc">KeySchemaElement</span> <span class="n">hashKeySchemaElement</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">KeySchemaElement</span><span class="o">(</span><span class="no">DAX_TEST_TABLE_HASH_KEY</span><span class="o">,</span> <span class="s">"HASH"</span><span class="o">);</span>

            <span class="c1">// Table</span>
            <span class="nc">CreateTableRequest</span> <span class="n">createTableRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CreateTableRequest</span><span class="o">();</span>
            <span class="n">createTableRequest</span>
                    <span class="o">.</span><span class="na">withTableName</span><span class="o">(</span><span class="no">DAX_TEST_TABLE</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">withAttributeDefinitions</span><span class="o">(</span><span class="n">attributeDefinitionList</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">withGlobalSecondaryIndexes</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">withProvisionedThroughput</span><span class="o">(</span><span class="k">new</span> <span class="nc">ProvisionedThroughput</span><span class="o">(</span><span class="mi">20L</span><span class="o">,</span> <span class="mi">10L</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">withGlobalSecondaryIndexes</span><span class="o">(</span><span class="n">userNameGSI</span><span class="o">,</span> <span class="n">userAgeGSI</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">withKeySchema</span><span class="o">(</span><span class="n">hashKeySchemaElement</span><span class="o">);</span>

            <span class="n">amazonDynamoDBClient</span><span class="o">.</span><span class="na">createTable</span><span class="o">(</span><span class="n">createTableRequest</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertData</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">//  Data prepare</span>
        <span class="c1">//* 1000 objs with same name</span>
        <span class="c1">//* 500  objs with same name &amp; same age</span>
        <span class="nc">DynamoDBMapper</span> <span class="n">dynamoDBMapper</span> <span class="o">=</span> <span class="nc">AwsCredential</span><span class="o">.</span><span class="na">getDynamoDBMapper</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">500</span><span class="o">){</span>
                <span class="n">dynamoDBMapper</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nc">DaxDataPrepare</span><span class="o">.</span><span class="na">DaxTest</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="s">"ChrisYe"</span><span class="o">,</span> <span class="mi">28</span><span class="o">));</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="n">dynamoDBMapper</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="k">new</span> <span class="nc">DaxDataPrepare</span><span class="o">.</span><span class="na">DaxTest</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="s">"ChrisYe"</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">DaxDataPrepare</span><span class="o">().</span><span class="na">createTable</span><span class="o">();</span>
        <span class="k">new</span> <span class="nf">DaxDataPrepare</span><span class="o">().</span><span class="na">insertData</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@DynamoDBTable</span><span class="o">(</span><span class="n">tableName</span> <span class="o">=</span> <span class="no">DAX_TEST_TABLE</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">DaxTest</span> <span class="o">{</span>

        <span class="kd">public</span> <span class="nf">DaxTest</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nf">DaxTest</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">userName</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">userAge</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">userAge</span> <span class="o">=</span> <span class="n">userAge</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@DynamoDBHashKey</span><span class="o">(</span><span class="n">attributeName</span> <span class="o">=</span> <span class="no">DAX_TEST_TABLE_HASH_KEY</span><span class="o">)</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>

        <span class="nd">@DynamoDBIndexHashKey</span><span class="o">(</span><span class="n">attributeName</span> <span class="o">=</span> <span class="no">DAX_TEST_USER_NAME</span><span class="o">,</span> <span class="n">globalSecondaryIndexName</span> <span class="o">=</span> <span class="no">INDEX_USER_NAME</span><span class="o">)</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">userName</span><span class="o">;</span>

        <span class="nd">@DynamoDBIndexHashKey</span><span class="o">(</span><span class="n">attributeName</span> <span class="o">=</span> <span class="no">DAX_TEST_USER_AGE</span><span class="o">,</span> <span class="n">globalSecondaryIndexName</span> <span class="o">=</span> <span class="no">INDEX_USER_AGE</span><span class="o">)</span>
        <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">userAge</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUserName</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">userName</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserName</span><span class="o">(</span><span class="nc">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getUserAge</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">userAge</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserAge</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">userAge</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">userAge</span> <span class="o">=</span> <span class="n">userAge</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="test">Test</h2>

<p>In order to check the item cache and query cache business logic, i prepare the test case below:</p>

<ul>
  <li>Hash Key Query
    <ul>
      <li>Query for a hash key <code class="language-plaintext highlighter-rouge">id</code>, check the hits</li>
      <li>Query for a hash key <code class="language-plaintext highlighter-rouge">id</code> again, check the hits</li>
    </ul>
  </li>
  <li>Index Query
    <ul>
      <li>Query for <code class="language-plaintext highlighter-rouge">index_user_name</code>, check the hits</li>
      <li>Query for <code class="language-plaintext highlighter-rouge">index_user_name</code> again, check the hits</li>
      <li>Query for <code class="language-plaintext highlighter-rouge">index_user_age</code>, check the hits</li>
      <li>Query for <code class="language-plaintext highlighter-rouge">index_user_age</code> again, check the hits</li>
    </ul>
  </li>
  <li>Scan
    <ul>
      <li>Scan for <code class="language-plaintext highlighter-rouge">100</code> per time, repeat for <code class="language-plaintext highlighter-rouge">10</code> times, check for hits</li>
      <li>Scan for <code class="language-plaintext highlighter-rouge">100</code> per time, repeat for <code class="language-plaintext highlighter-rouge">10</code> times again, check for hits</li>
      <li>Scan for <code class="language-plaintext highlighter-rouge">25</code> per time, repeat for 4 times</li>
    </ul>
  </li>
  <li>Get Item
    <ul>
      <li>Get <code class="language-plaintext highlighter-rouge">100</code> items, check the hits</li>
      <li>Get <code class="language-plaintext highlighter-rouge">10</code> items, check the hits</li>
    </ul>
  </li>
  <li>Batch Get Item
    <ul>
      <li>Batch get <code class="language-plaintext highlighter-rouge">100</code> same items as Get item, check the hits</li>
      <li>Batch get <code class="language-plaintext highlighter-rouge">100</code> same items as Get item again, check the hits</li>
      <li>Batch get <code class="language-plaintext highlighter-rouge">25</code> item which included by the result above, check the hits</li>
      <li>Batch get <code class="language-plaintext highlighter-rouge">10000</code>, check the time</li>
      <li>Batch get <code class="language-plaintext highlighter-rouge">10000</code> again, check the time</li>
    </ul>
  </li>
</ul>

<p>So i prepare a small application</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">package</span> <span class="nn">com.patsnap.chris</span><span class="o">;</span>

    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.datamodeling.ScanResultPage</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.AttributeValue</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.dynamodbv2.model.Select</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.lambda.runtime.Context</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.amazonaws.services.lambda.runtime.LambdaLogger</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">com.fasterxml.jackson.databind.ObjectMapper</span><span class="o">;</span>

    <span class="kn">import</span> <span class="nn">org.apache.log4j.Logger</span><span class="o">;</span>

    <span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.io.OutputStream</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
    <span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

        <span class="nc">Long</span> <span class="n">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">getTime</span><span class="o">();</span>

        <span class="nc">String</span> <span class="n">debug</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"true"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">opType</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"hashKeyQuery"</span><span class="o">);</span>

        <span class="nc">DynamoDBMapper</span> <span class="n">mapper</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Boolean</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">debug</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">mapper</span> <span class="o">=</span> <span class="nc">DynamoDBClient</span><span class="o">.</span><span class="na">getDynamoDBMapper</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">mapper</span> <span class="o">=</span> <span class="nc">DynamoDBDaxClient</span><span class="o">.</span><span class="na">getDynamoDBMapper</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// Hash Key Query</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"hashKeyQuery"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">opType</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">hashKeyValue</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>

            <span class="nc">DaxTestTableObj</span> <span class="n">daxTestTableObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DaxTestTableObj</span><span class="o">();</span>
            <span class="n">daxTestTableObj</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">hashKeyValue</span><span class="o">);</span>
            <span class="nc">DynamoDBQueryExpression</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;</span> <span class="n">queryExpression</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DynamoDBQueryExpression</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;()</span>
                    <span class="o">.</span><span class="na">withHashKeyValues</span><span class="o">(</span><span class="n">daxTestTableObj</span><span class="o">);</span>
            <span class="nc">PaginatedQueryList</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;</span> <span class="n">paginationList</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="nc">DaxTestTableObj</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">queryExpression</span><span class="o">,</span> <span class="nc">DynamoDBMapperConfig</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hashKeyQuery: "</span> <span class="o">+</span> <span class="n">paginationList</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="c1">// Index Query</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"indexQuery"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">opType</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">hashKeyValue</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">indexName</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>

            <span class="nc">DaxTestTableObj</span> <span class="n">daxTestTableObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DaxTestTableObj</span><span class="o">(</span><span class="n">hashKeyValue</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="s">"index_user_age"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">indexName</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">daxTestTableObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DaxTestTableObj</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">hashKeyValue</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="nc">DynamoDBQueryExpression</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;</span> <span class="n">queryExpression</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DynamoDBQueryExpression</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;()</span>
                    <span class="o">.</span><span class="na">withIndexName</span><span class="o">(</span><span class="n">indexName</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">withHashKeyValues</span><span class="o">(</span><span class="n">daxTestTableObj</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">withConsistentRead</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
            <span class="nc">PaginatedQueryList</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;</span> <span class="n">paginationList</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="nc">DaxTestTableObj</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">queryExpression</span><span class="o">,</span> <span class="nc">DynamoDBMapperConfig</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"indexQuery: "</span> <span class="o">+</span> <span class="n">paginationList</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="c1">// Scan</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"scan"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">opType</span><span class="o">))</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">10000</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">args</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">total</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"10000"</span><span class="o">));</span>
                <span class="n">limit</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"100"</span><span class="o">));</span>
            <span class="o">}</span>

            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">AttributeValue</span><span class="o">&gt;</span> <span class="n">exclusiveStartKey</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
            <span class="nc">DynamoDBScanExpression</span> <span class="n">dynamoDBScanExpression</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DynamoDBScanExpression</span><span class="o">();</span>
            <span class="n">dynamoDBScanExpression</span><span class="o">.</span><span class="na">setLimit</span><span class="o">(</span><span class="n">limit</span><span class="o">);</span>
            <span class="n">dynamoDBScanExpression</span><span class="o">.</span><span class="na">setSelect</span><span class="o">(</span><span class="nc">Select</span><span class="o">.</span><span class="na">ALL_ATTRIBUTES</span><span class="o">);</span>
            <span class="n">dynamoDBScanExpression</span><span class="o">.</span><span class="na">withExclusiveStartKey</span><span class="o">(</span><span class="n">exclusiveStartKey</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">do</span> <span class="o">{</span>
                <span class="nc">ScanResultPage</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">scanPage</span><span class="o">(</span><span class="nc">DaxTestTableObj</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">dynamoDBScanExpression</span><span class="o">,</span> <span class="nc">DynamoDBMapperConfig</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
                <span class="n">exclusiveStartKey</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getLastEvaluatedKey</span><span class="o">();</span>
                <span class="n">dynamoDBScanExpression</span><span class="o">.</span><span class="na">withExclusiveStartKey</span><span class="o">(</span><span class="n">exclusiveStartKey</span><span class="o">);</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="n">limit</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">exclusiveStartKey</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">total</span><span class="o">);</span>

            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Scan count: "</span> <span class="o">+</span> <span class="n">count</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// Get Item</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"getItem"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">opType</span><span class="o">))</span> <span class="o">{</span>

            <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"100"</span><span class="o">));</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">mapper</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="nc">DaxTestTableObj</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"GetItem count: "</span> <span class="o">+</span> <span class="n">limit</span><span class="o">);</span>
        <span class="o">}</span>


        <span class="c1">// Batch get item</span>
        <span class="k">if</span> <span class="o">(</span><span class="s">"batchGetItem"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">opType</span><span class="o">))</span> <span class="o">{</span>

            <span class="kt">int</span> <span class="n">limit</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"100"</span><span class="o">));</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">DaxTestTableObj</span><span class="o">&gt;</span> <span class="n">itemsToGet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">DaxTestTableObj</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DaxTestTableObj</span><span class="o">();</span>
                <span class="n">obj</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
                <span class="n">itemsToGet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">obj</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">batchLoad</span><span class="o">(</span><span class="n">itemsToGet</span><span class="o">);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"BatchGetItem count: "</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"dax_test"</span><span class="o">).</span><span class="na">size</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="nc">Long</span> <span class="n">end</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">getTime</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Cost: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">" ms"</span><span class="o">);</span>

    <span class="o">}</span>
</code></pre></div></div>

<p>Make it into a executive jar named  <code class="language-plaintext highlighter-rouge">executable_jar-jar-with-dependencies.jar</code> Letâ€™s begin!</p>

<h4 id="hash-key-query">Hash Key Query</h4>

<ul>
  <li>Query for a hash key <code class="language-plaintext highlighter-rouge">id</code>, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/hash_key_query1.png" alt="hash_key_query1" />
<img src="http://localhost:4000/images/aws_dax/hash_key_query_result1.png" alt="hash_key_query_result1" /></p>

<ul>
  <li>Query for a hash key <code class="language-plaintext highlighter-rouge">id</code> again, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/hash_key_query_result2.png" alt="hash_key_query_result2" /></p>

<h4 id="index-query">Index Query</h4>

<ul>
  <li>Query for <code class="language-plaintext highlighter-rouge">index_user_name</code>, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/index_query1.png" alt="index_query1" />
<img src="http://localhost:4000/images/aws_dax/index_query_result1.png" alt="index_query_result1" /></p>

<ul>
  <li>Query for <code class="language-plaintext highlighter-rouge">index_user_name</code> again, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/index_query_result2.png" alt="index_query_result2" /></p>

<ul>
  <li>Query for <code class="language-plaintext highlighter-rouge">index_user_age</code>, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/index_query2.png" alt="index_query2" />
<img src="http://localhost:4000/images/aws_dax/index_query_result2.png" alt="index_query_result2" /></p>

<ul>
  <li>Query for <code class="language-plaintext highlighter-rouge">index_user_age</code> again, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/index_query_result3.png" alt="index_query_result3" /></p>

<h4 id="scan">Scan</h4>

<ul>
  <li>Scan for <code class="language-plaintext highlighter-rouge">100</code> per time, repeat for <code class="language-plaintext highlighter-rouge">10</code> times, check for hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/scan1.png" alt="scan1" />
<img src="http://localhost:4000/images/aws_dax/scan_result1.png" alt="scan_result1" /></p>

<ul>
  <li>Scan for <code class="language-plaintext highlighter-rouge">100</code> per time, repeat for <code class="language-plaintext highlighter-rouge">10</code> times again, check for hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/scan_result2.png" alt="scan_result2" /></p>

<ul>
  <li>Scan for <code class="language-plaintext highlighter-rouge">25</code> per time, repeat for <code class="language-plaintext highlighter-rouge">4</code> times</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/scan2.png" alt="scan2" />
<img src="http://localhost:4000/images/aws_dax/scan_result3.png" alt="scan_result3" /></p>

<h4 id="get-item">Get Item</h4>

<ul>
  <li>Get <code class="language-plaintext highlighter-rouge">100</code> items, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/get_item1.png" alt="get_item1" />
<img src="http://localhost:4000/images/aws_dax/get_item_result1.png" alt="get_item_result1" /></p>

<ul>
  <li>Get <code class="language-plaintext highlighter-rouge">10</code> items, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/get_item_result2.png" alt="get_item_result2" /></p>

<h4 id="batch-get-item">Batch Get Item</h4>

<ul>
  <li>Batch get <code class="language-plaintext highlighter-rouge">100</code> same items as Get item, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/batch_get_item1.png" alt="batch_get_item1" />
<img src="http://localhost:4000/images/aws_dax/batch_get_item_result1.png" alt="batch_get_item_result1" /></p>

<ul>
  <li>Batch get <code class="language-plaintext highlighter-rouge">100</code> same items as Get item again, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/batch_get_item2.png" alt="batch_get_item2" />
<img src="http://localhost:4000/images/aws_dax/batch_get_item_result2.png" alt="batch_get_item_result2" /></p>

<ul>
  <li>Batch get <code class="language-plaintext highlighter-rouge">25</code> item which included by the result above, check the hits</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/batch_get_item_result3.png" alt="batch_get_item_result3" /></p>

<ul>
  <li>Batch get <code class="language-plaintext highlighter-rouge">10000</code>, check the time</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/batch_get_item3.png" alt="batch_get_item3" /></p>

<ul>
  <li>Batch get <code class="language-plaintext highlighter-rouge">10000</code> again, check the time</li>
</ul>

<p><img src="http://localhost:4000/images/aws_dax/batch_get_item4.png" alt="batch_get_item4" /></p>

<p><strong><em>From the test result, we can get:</em></strong></p>

<ul>
  <li><strong><em>Hash key query do not cache</em></strong></li>
  <li><strong><em>Different query parameter do not share cache</em></strong></li>
  <li><strong><em>Get and batch get use item key as cache key</em></strong></li>
  <li><strong><em>4 times time cost saving</em></strong></li>
</ul>

:ET